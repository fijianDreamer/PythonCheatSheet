# Declare multple variables in one line:
a, b = 1, 2

# Reverse A String
def backward_string(val: str) -> str:
    # your code here
    # while not end of string, add to result
    i = len(val)-1
    #print(i)
    result = ""
    while(i >= 0):
        result += val[i]
        i-= 1
    return result

# quicker way using slicing (called negative step)
def backward_string(val: str) -> str:
    # while not end of string, add to result
    return val[::-1]

# use str() to convert a number into string to modify it
a = 12
a = str(a)
print(a)
==============================================
# How to traverse a string using a for loop
# Problem: Traverse a string & count the number of vowels in it
==============================================
def count_vowels(text: str) -> int:
    vowels = 'aeiouAEIOU'
    count = 0

    # loop through the text. If it's a vowel, add to count
    for letter in text:
        if letter in vowels:
            count += 1
    
    # return count
    return count

# Strings are immutable. To Add to a string:
result = ""
result += addToString

# Lists use append
result = ["a", "b"]
result.append("addToResult")

==============================================
# How to use .find() -> .find() returns the starting index of string, or -1 if not found
# Problem: In a given string you need to check if one symbol goes right after another. If so - return True, otherwise - False. If one of 
#          the symbols is not in the given word - your function should return False. If two seeking symbols are the same - your function 
$          should return False.
==============================================
def goes_after(word: str, first: str, second: str) -> bool:
    # if one of the letters isn't found, return false
    if word.find(second) == -1 or word.find(first) == -1:
        return False
    # if second letter is not rights after (index + 1) first letter, it is false, else return true
    if word.find(second) == (word.find(first) + 1):
        return True
    return False
